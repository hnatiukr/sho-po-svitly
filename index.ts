import fs from 'fs';
import { resolve } from 'path';

// @ts-ignore types declaration does not exist
import netPing from 'net-ping';
import * as dotenv from 'dotenv';
import schedule from 'node-schedule';
import { Telegraf, Context, Markup } from 'telegraf';

import dayjs from 'dayjs';
import uk from 'dayjs/locale/uk';
import utc from 'dayjs/plugin/utc';
import relativeTime from 'dayjs/plugin/relativeTime';
import updateLocale from 'dayjs/plugin/updateLocale';

//

dotenv.config();

dayjs.locale(uk);
dayjs.extend(utc);
dayjs.extend(relativeTime);
dayjs.extend(updateLocale);

//

enum Power {
    Off = 0,
    On = 1,
}

type UserId = number;

type IsActivated = boolean;

type Ip = string;

type Log = {
    ip: Ip;
    timestamp: number;
    power: Power;
};

//

const fileNames = {
    logs: 'logs.json',
    activations: 'activations.json',
};

//

function isValidIp(ipCandidate: Ip) {
    const ipV4RegExp = /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/;

    return ipV4RegExp.test(ipCandidate);
}

function pathFromRoot(path: string): string {
    return resolve(process.cwd(), path);
}

function getUserId(context: Context): UserId {
    if (context?.from?.id) {
        return context?.from?.id;
    }

    if (context?.message?.from.id) {
        return context?.message?.from.id;
    }

    // @ts-ignore an incorrect context param type
    return context.update.message.from.id;
}

function ping(ip: Ip, callback: (power: Power) => void): void {
    const session = netPing.createSession();

    session.pingHost(ip, (error: Error) => {
        const power = error ? 0 : 1;
        const logTime = dayjs().locale('en').utcOffset(2).format('DD MMM YYYY, hh:mm a');

        console.log(`${logTime} | ${ip} | status: ${power}`);

        callback(power);

        session.close();
    });
}

function startSchedule(context: Context): void {
    const everyMinute = '*/1 * * * *';

    schedule.scheduleJob(everyMinute, () => {
        const userId = getUserId(context);
        const log = getMapValue<Log>(userId, fileNames.logs);

        if (log === undefined) {
            context.reply(
                '–£–ø—Å.. —â–æ—Å—å –≤–æ–Ω–æ –Ω–µ —Ä–æ–±–µ. –°—Ö–æ–∂–µ, —Ç–≤–æ—è IP –∞–¥—Ä–µ—Å–∞ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞. –°–ø—Ä–æ–±—É–π –Ω–∞–Ω–æ–≤–æ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ —ó—ó —á–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è /settings',
            );

            return;
        }

        const { ip, timestamp, power: prevPower } = log;

        ping(ip, async (nextPower) => {
            if (prevPower !== nextPower) {
                if (nextPower === 1) {
                    await context.reply(
                        `üí° –ê–ª–ª—ñ–ª—É—è! –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –ê–ª–µ –Ω–µ –∑–ª–æ–≤–∂–∏–≤–∞–π —ó–º, –±–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ –∂–æ–ø—ñ –Ω–∞–¥–∞—î. –°–≤—ñ—Ç–ª–∞ –Ω–µ –±—É–ª–æ ${passedTimeFrom(
                            timestamp,
                        )}`,
                    );
                } else {
                    await context.reply(
                        `‚õîÔ∏è –°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–∏–∫—É –≤–∏—Ä—É–±–∏–ª–∏ –Ω–∞—Ö—É–π. –£ —Ç–µ–±–µ –Ω–∞ –≤—Å—å–æ –ø—Ä–æ–≤—Å—å–æ –±—É–ª–æ ${passedTimeFrom(
                            timestamp,
                        )}`,
                    );
                }

                await setMapValue(
                    userId,
                    {
                        ip,
                        power: nextPower,
                        timestamp: utcTimestamp(),
                    },
                    fileNames.logs,
                );
            }
        });
    });
}

function utcTimestamp(): number {
    return dayjs().utc().valueOf();
}

function passedTimeFrom(timestamp: number): string {
    return dayjs(timestamp).fromNow(true);
}

function getParsedMap<Entity>(jsonPath: string): Map<UserId, Entity> {
    const json = fs.readFileSync(jsonPath, 'utf-8');
    const parsed: [UserId, Entity][] = JSON.parse(json);

    const map = new Map<UserId, Entity>();

    for (const [parsedKey, parsedValue] of parsed) {
        map.set(parsedKey, parsedValue);
    }

    return map;
}

function getMapValue<Entity>(userId: UserId, fileName: string): Entity | undefined {
    const map = getParsedMap<Entity>(pathFromRoot(fileName));

    return map.get(userId);
}

function setMapValue<Entity>(userId: UserId, entity: Entity, fileName: string): void {
    const path = pathFromRoot(fileName);
    const map = getParsedMap<Entity>(path);

    map.set(userId, entity);

    const mapEntries = [...map.entries()];

    fs.writeFileSync(path, JSON.stringify(mapEntries, null, 4));
}

function deleteMapValue<Entity>(userId: UserId, fileName: string): void {
    const path = pathFromRoot(fileName);
    const map = getParsedMap<Entity>(path);

    map.delete(userId);

    const mapEntries = [...map.entries()];

    fs.writeFileSync(path, JSON.stringify(mapEntries, null, 4));
}

//

if (process.env.BOT_TOKEN === undefined) {
    throw ReferenceError(`"BOT_TOKEN" env var is required!`);
}

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.on('text', async (context, next) => {
    const userId = getUserId(context);
    const isActivated = getMapValue<IsActivated>(userId, fileNames.activations);

    if (isActivated) {
        const log = getMapValue<Log>(userId, fileNames.logs);

        if (!log) {
            const ipCandidate = context.message.text;

            if (isValidIp(ipCandidate)) {
                await context.reply(
                    `–û, –∫—Ä–∞—Å–∞–≤–∞! –£ –ø–æ–¥–∞–ª—å—à–æ–º—É, —Ç–∏ –∑–º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ IP –∞–¥—Ä–µ—Å—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö`,
                );

                await context.reply(
                    '–î–∞–≤–∞–π –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞. –î–ª—è –ø–æ—á–∞—Ç–∫—É, –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —à–æ —Ç–∞–º –ø–æ —Å–≤—ñ—Ç–ª—É –∑–∞—Ä–∞–∑',
                );

                await context.reply('–•–≤–∏–ª–∏–Ω–æ—á–∫—É... üê¢');

                await ping(ipCandidate, async (power) => {
                    if (power === 1) {
                        await context.reply('üí° –°—Ö–æ–∂–µ, –∑–∞—Ä–∞–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ —î. –Ü —Ü–µ –∑–∞—î–±—ñ—Å—å');
                    } else {
                        await context.reply('‚õîÔ∏è –°—Ö–æ–∂–µ, c–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –ó–∞—Ä–∞–∑ –µ–ª–µ–∫—Ä–∏–∫–∏ –Ω–µ–º–∞—î');
                    }

                    await setMapValue(
                        userId,
                        {
                            power,
                            ip: ipCandidate,
                            timestamp: utcTimestamp(),
                        },
                        fileNames.logs,
                    );

                    await context.reply(
                        '–Ø –ø—Ä–æ–¥–æ–≤–∂—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —ñ –æ–¥—Ä–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª—é, —è–∫—â–æ –∑ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º —â–æ—Å—å —Ç—Ä–∞–ø–∏—Ç—å—Å—è. –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /ping ',
                    );

                    await startSchedule(context);

                    await context.reply('–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ IP –∞–¥—Ä–µ—Å—É –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /settings');

                    await context.reply(
                        '–ê–±–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ç–æ–≥–æ –º—ñ—Å—Ü—è, –¥–µ —Ç–∏ –Ω–∞–±–∏—Ä–∞—î—à —Ç–µ–∫—Å—Ç \n\n–û—Ç—É—Ç, –≤–Ω–∏–∑—É ‚ÜôÔ∏è',
                    );
                });
            } else {
                await context.reply('–•—É–π–Ω—è —è–∫–∞—Å—å. –¢–∏ —à–æ –Ω–µ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É IP –∞–¥—Ä–µ—Å—É?');
            }
        }
    } else {
        await context.reply(
            '–ü—Ä–∏–≤—ñ—Ç. –Ø –≤–º—ñ—é —ñ–Ω—Ñ–æ—Ä–º–≤–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó, –ø—ñ–Ω–≥—É—é—á–∏ —Ä–æ—É—Ç–µ—Ä',
        );

        await context.reply(
            '–¢–≤–æ—î—ó IP –∞–¥—Ä–µ—Å–∏ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –¢–∏—Å–Ω–∏ –∫–Ω—ñ–ø–æ—á–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥–æ–¥–∞—Ç–∏ —ó—ó',
            Markup.inlineKeyboard([Markup.button.callback('–∫–Ω—ñ–ø–æ—á–∫–∞', 'set-ip')]),
        );

        setMapValue<IsActivated>(userId, true, fileNames.activations);
    }

    await next();
});

bot.command('ping', async (context) => {
    const userId = getUserId(context);
    const log = getMapValue<Log>(userId, fileNames.logs);

    if (log) {
        const { ip, timestamp } = log;

        await ping(ip, async (power) => {
            if (power === 1) {
                await context.reply(
                    `üí° –ë—Ä–∏—Ç–∞–Ω—Å—å–∫–∞ —Ä–æ–∑–≤—ñ–¥–∫–∞ –¥–æ–ø–æ–≤—ñ–¥–∞—î, —â–æ –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ –≤ —Ö–∞—Ç—ñ —î –≤–∂–µ ${passedTimeFrom(
                        timestamp,
                    )}`,
                );
            } else {
                await context.reply(
                    `‚õîÔ∏è –°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î –≤–∂–µ ${passedTimeFrom(
                        timestamp,
                    )}`,
                );
            }
        });
    }
});

bot.command('settings', async (context) => {
    const userId = getUserId(context);
    const log = getMapValue<Log>(userId, fileNames.logs);

    if (log) {
        await context.reply(
            '‚öôÔ∏è–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IP –∞–¥—Ä–µ—Å–∏\n',
            Markup.inlineKeyboard([
                Markup.button.callback('üëÄ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏', 'show-ip'),
                Markup.button.callback('‚úèÔ∏èÔ∏è –∑–º—ñ–Ω–∏—Ç–∏', 'set-ip'),
            ]),
        );
    }
});

bot.command('schedule', async (context) => {
    const userId = getUserId(context);
    const log = getMapValue<Log>(userId, fileNames.logs);

    if (log) {
        await context.reply(
            '–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å',
            Markup.inlineKeyboard([
                Markup.button.url(
                    '–ö–∏—ó–≤',
                    'https://kyiv.yasno.com.ua/schedule-turn-off-electricity',
                ),
                Markup.button.url('–õ—å–≤—ñ–≤', 'https://poweroff.loe.lviv.ua/'),
            ]),
        );
    }
});

bot.command('chmut', async (context) => {
    await context.reply('–†–£–°–ù–Ü - –ü–ò–ó–î–ê!');
});

bot.action('show-ip', async (context) => {
    const userId = getUserId(context);
    const log = getMapValue<Log>(userId, fileNames.logs);

    if (log === undefined) {
        await context.reply(
            '–°—Ö–æ–∂–µ, —Ç–≤–æ—è IP –∞–¥—Ä–µ—Å–∞ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /settings, –∞ –¥–∞–ª—ñ —Å–∞–º —Ä–æ–∑–±–µ—Ä–µ—à—å—Å—è',
        );

        return;
    }

    await context.reply(`–¢–≤–æ—è IP –∞–¥—Ä–µ—Å–∞: ${log.ip}`);
});

bot.action('set-ip', async (context) => {
    const userId = getUserId(context);

    await context.reply(
        '‚¨áÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é IP –∞–¥—Ä–µ—Å—É (–≤–æ–Ω–∞ –º–∞—î –±—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ—é —ñ –ø—É–±–ª—ñ—á–Ω–æ—é, —ñ–Ω–∞–∫—à–µ –Ω—ñ—Ö—É—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ):',
    );

    await deleteMapValue(userId, fileNames.logs);
});

bot.launch()
    .then(() => {
        const logsJsonPath = pathFromRoot(fileNames.logs);

        if (!fs.existsSync(logsJsonPath)) {
            fs.writeFileSync(logsJsonPath, JSON.stringify([]));

            console.log(`"${fileNames.logs}" has been created`);
            console.log(logsJsonPath);
        }

        const activationsJsonPath = pathFromRoot(fileNames.activations);

        if (!fs.existsSync(activationsJsonPath)) {
            fs.writeFileSync(activationsJsonPath, JSON.stringify([]));

            console.log(`"${fileNames.activations}" has been created`);
            console.log(activationsJsonPath);
        }
    })
    .finally(() => console.log('Bot has been started'));
