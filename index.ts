import fs from 'fs';
import { resolve } from 'path';

// @ts-ignore types declaration does not exist
import netPing from 'net-ping';
import * as dotenv from 'dotenv';
import { scheduleJob } from 'node-schedule';
import { Telegraf, Context, Markup } from 'telegraf';

import dayjs from 'dayjs';
import uk from 'dayjs/locale/uk';
import utc from 'dayjs/plugin/utc';
import relativeTime from 'dayjs/plugin/relativeTime';
import updateLocale from 'dayjs/plugin/updateLocale';

//

dotenv.config();

dayjs.locale(uk);
dayjs.extend(utc);
dayjs.extend(relativeTime);
dayjs.extend(updateLocale);

//

enum Power {
    Off = 0,
    On = 1,
}

type Ip = string;

type UserId = number;

//

const pathTo = {
    logsJSON: pathFromRoot('logs.json'),
    activationsJSON: pathFromRoot('activations.json'),
};

//

function isValidIp(ipCandidate: Ip) {
    const ipV4RegExp = /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/;

    return ipV4RegExp.test(ipCandidate);
}

function pathFromRoot(path: string): string {
    return resolve(process.cwd(), path);
}

//

namespace Time {
    export function utcTimestamp(): number {
        return dayjs().utc().valueOf();
    }

    export function passedTimeFrom(timestamp: number): string {
        return dayjs(timestamp).fromNow(true);
    }
}

//

namespace FS {
    export function readFile<Data>(path: string): Data {
        const json = fs.readFileSync(path, 'utf-8');

        return JSON.parse(json);
    }

    export function writeFile<Data>(path: string, data: Data): void {
        fs.writeFileSync(path, JSON.stringify(data, null, 4));
    }

    export function createFile<Data>(path: string, data: Data): void {
        if (!fs.existsSync(path)) {
            FS.writeFile(path, data);

            console.log(`${path} has been created`);
        }
    }
}

//

namespace Activations {
    export function get(): Set<UserId> {
        const json = FS.readFile<[UserId]>(pathTo.activationsJSON);

        return new Set(json);
    }

    export function has(userId: UserId) {
        const activations = Activations.get();

        return activations.has(userId);
    }

    export function add(userId: UserId) {
        const activations = Activations.get();

        activations.add(userId);

        const values = [...activations.values()];

        FS.writeFile<UserId[]>(pathTo.activationsJSON, values);
    }
}

//

interface Log {
    createdAt: number;
    power: Power;
}

namespace Log {
    export function getLast(userId: UserId): Log | undefined {
        const user = User.get(userId);

        if (user) {
            return user.logs[user.logs.length - 1];
        }
    }

    export function add(userId: UserId, power: Power): void {
        const users = User.getAll();

        const updatedUsers = users.map((user) => {
            if (user.userId === userId) {
                const log: Log = {
                    power,
                    createdAt: Time.utcTimestamp(),
                };

                return {
                    ...user,
                    logs: [...user.logs, log],
                };
            }

            return user;
        });

        FS.writeFile(pathTo.logsJSON, updatedUsers);
    }
}

//

interface User {
    createdAt: number;
    userId: UserId;
    ip: Ip;
    logs: Log[];
}

namespace User {
    export function getAll(): User[] {
        return FS.readFile<User[]>(pathTo.logsJSON);
    }

    export function get(userId: UserId): User | undefined {
        const users = User.getAll();

        return users.find((user) => user.userId === userId);
    }

    export function getId(context: Context): number {
        if (context?.from?.id) {
            return context?.from?.id;
        }

        if (context?.message?.from.id) {
            return context?.message?.from.id;
        }

        // @ts-ignore an incorrect context param type
        return context.update.message.from.id;
    }

    export function add(user: Pick<User, 'ip' | 'userId'>): void {
        const users = User.getAll();

        const timestamp = Time.utcTimestamp();

        users.push({
            ip: user.ip,
            userId: user.userId,
            createdAt: timestamp,
            logs: [],
        });

        FS.writeFile(pathTo.logsJSON, users);
    }
}

//

async function ping(ip: Ip, callback: (power: Power) => void): Promise<void> {
    const session = netPing.createSession();

    await session.pingHost(ip, async (error: Error) => {
        const power = error ? Power.Off : Power.On;
        const pingTime = dayjs().locale('en').utcOffset(2).format('DD MMM YYYY, hh:mm a');

        console.log(`${pingTime} | ${ip} | status: ${power}`);

        await callback(power);

        await session.close();
    });
}

//

async function startSchedule(userId: UserId): Promise<void> {
    const every30Seconds = '1,31 * * * * *';

    await scheduleJob(every30Seconds, async () => {
        const user = User.get(userId);
        const log = Log.getLast(userId);

        const { ip } = user!;
        const { createdAt, power: prevPower } = log!;

        await ping(ip, async (nextPower) => {
            if (prevPower !== nextPower) {
                if (nextPower === Power.On) {
                    await bot.telegram.sendMessage(
                        userId,
                        `üí° –ê–ª–ª—ñ–ª—É—è! –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –ê–ª–µ –Ω–µ –∑–ª–æ–≤–∂–∏–≤–∞–π —ó–º, –±–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ –∂–æ–ø—ñ –Ω–∞–¥–∞—î. –°–≤—ñ—Ç–ª–∞ –Ω–µ –±—É–ª–æ ${Time.passedTimeFrom(
                            createdAt,
                        )}`,
                    );
                } else if (nextPower == Power.Off) {
                    await bot.telegram.sendMessage(
                        userId,
                        `‚õîÔ∏è –°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–∏–∫—É –≤–∏—Ä—É–±–∏–ª–∏ –Ω–∞—Ö—É–π. –£ —Ç–µ–±–µ –Ω–∞ –≤—Å—å–æ –ø—Ä–æ–≤—Å—å–æ –±—É–ª–æ ${Time.passedTimeFrom(
                            createdAt,
                        )}`,
                    );
                }

                await Log.add(userId, nextPower);
            }
        });
    });
}

//

if (process.env.BOT_TOKEN === undefined) {
    throw ReferenceError(`"BOT_TOKEN" env var is required!`);
}

const bot = new Telegraf(process.env.BOT_TOKEN);

//

bot.start(async (context) => {
    const userId = User.getId(context);
    const isActivated = Activations.has(userId);

    await context.reply(
        '–ü—Ä–∏–≤—ñ—Ç. –Ø –≤–º—ñ—é —ñ–Ω—Ñ–æ—Ä–º–≤–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó, –ø—ñ–Ω–≥—É—é—á–∏ —Ä–æ—É—Ç–µ—Ä',
    );

    if (isActivated) {
        const user = User.get(userId);

        if (user) {
            await context.reply(
                '–¢–≤–æ—è IP –∞–¥—Ä–µ—Å–∞ –≤–∂–µ —î –≤ –±–∞–∑—ñ. –Ø –ø—Ä–æ–¥–æ–≤–∂—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —ñ –æ–¥—Ä–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª—é, —è–∫—â–æ –∑ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º —â–æ—Å—å —Ç—Ä–∞–ø–∏—Ç—å—Å—è.',
            );

            await startSchedule(userId);
        }
    } else {
        await context.reply(
            '–¢–≤–æ—î—ó IP –∞–¥—Ä–µ—Å–∏ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ —ó—ó –º–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: ',
        );

        Activations.add(userId);
    }
});

bot.on('text', async (context, next) => {
    const userId = User.getId(context);
    const user = User.get(userId);

    const isActivated = Activations.has(userId);

    if (isActivated && !user) {
        const ipCandidate = context.message.text;

        if (isValidIp(ipCandidate)) {
            await User.add({ userId, ip: ipCandidate });

            await context.reply('–û, –∫—Ä–∞—Å–∞–≤–∞! –¢–µ–ø–µ—Ä, –¥–∞–≤–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —à–æ —Ç–∞–º—É —Ç–µ–±–µ –ø–æ —Å–≤—ñ—Ç–ª—É –∑–∞—Ä–∞–∑');

            await context.reply('–•–≤–∏–ª–∏–Ω–æ—á–∫—É... üê¢');

            await ping(ipCandidate, async (power) => {
                switch (power) {
                    case Power.On: {
                        await context.reply('üí° –°—Ö–æ–∂–µ, –∑–∞—Ä–∞–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ —î. –Ü —Ü–µ –∑–∞—î–±—ñ—Å—å');

                        break;
                    }

                    case Power.Off: {
                        await context.reply('‚õîÔ∏è –°—Ö–æ–∂–µ, c–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –ó–∞—Ä–∞–∑ –µ–ª–µ–∫—Ä–∏–∫–∏ –Ω–µ–º–∞—î');

                        break;
                    }

                    default: {
                        throw new Error(`bot.on: Unknown power value: ${power}`);
                    }
                }

                await Log.add(userId, power);

                await context.reply(
                    '–Ø –ø—Ä–æ–¥–æ–≤–∂—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —ñ –ø–æ–≤—ñ–¥–æ–º–ª—é, —è–∫ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –∑–º—ñ–Ω–∏—Ç—å—Å—è',
                );

                await startSchedule(userId);
            });
        } else {
            await context.reply('–•—É–π–Ω—è —è–∫–∞—Å—å. –¢–∏ —à–æ –Ω–µ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É IP –∞–¥—Ä–µ—Å—É?');
        }
    }

    await next();
});

bot.command('ping', async (context) => {
    const userId = User.getId(context);
    const user = User.get(userId);
    const log = Log.getLast(userId);

    if (user && log) {
        const { ip } = user;
        const { createdAt, power: prevPower } = log;

        await ping(ip, async (nextPower) => {
            const hasPowerChanged = prevPower !== nextPower;

            if (hasPowerChanged) {
                switch (nextPower) {
                    case Power.On: {
                        await context.reply(
                            `üí°–í–µ—á—ñ—Ä –≤ —Ö–∞—Ç—É! –ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è —â–æ–π–Ω–æ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏. –í–æ–Ω–æ –±—É–ª–æ –≤—ñ–¥—Å—É—Ç–Ω—î ${Time.passedTimeFrom(
                                createdAt,
                            )}`,
                        );

                        break;
                    }

                    case Power.Off: {
                        await context.reply(
                            `‚õî–°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –£ —Ç–µ–±–µ –Ω–∞ –≤—Å—å–æ-–ø—Ä–æ–≤—Å—å–æ –±—É–ª–æ ${Time.passedTimeFrom(
                                createdAt,
                            )}`,
                        );

                        break;
                    }

                    default: {
                        throw new Error(
                            `bot.command(/ping): Unknown nextPower value: ${nextPower}`,
                        );
                    }
                }

                await Log.add(userId, nextPower);
            } else {
                switch (prevPower) {
                    case Power.On: {
                        await context.reply(
                            `‚ö°Ô∏è–ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤ —Ö–∞—Ç—ñ —î –≤–∂–µ ${Time.passedTimeFrom(createdAt)}`,
                        );

                        break;
                    }

                    case Power.Off: {
                        await context.reply(
                            `üîå–ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î –≤–∂–µ ${Time.passedTimeFrom(createdAt)}`,
                        );

                        break;
                    }

                    default: {
                        throw new Error(
                            `bot.command(/ping): Unknown prevPower value: ${prevPower}`,
                        );
                    }
                }
            }
        });
    }
});

bot.command('settings', async (context) => {
    const userId = User.getId(context);
    const log = Log.getLast(userId);

    if (log) {
        await context.reply(
            '‚öôÔ∏è–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n',
            Markup.inlineKeyboard([Markup.button.callback('üëÄ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ IP –∞–¥—Ä–µ—Å—É', 'show-ip')]),
        );
    }
});

bot.command('schedule', async (context) => {
    const userId = User.getId(context);
    const log = Log.getLast(userId);

    if (log) {
        await context.reply(
            '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Ç–∏ –º–æ–∂–µ—à –Ω–∏–∂—á–µ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏. –ê–ª–µ –∂ —Ç–∏ –∑–Ω–∞—î—à, —â–æ –≤–æ–Ω–∏ –Ω—ñ—Ö—É—è –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å, –±–æ –π–æ–±–∞–Ω—ñ —Ä–æ—Å—ñ—è–Ω–∏ - –Ω—ñ–∫—á–µ–º–∏, –≥–Ω—ñ–π —ñ –ø—ñ–¥–∞—Ä–∞—Å–∏!',
            Markup.inlineKeyboard([
                Markup.button.url(
                    '–ö–∏—ó–≤',
                    'https://kyiv.yasno.com.ua/schedule-turn-off-electricity',
                ),
                Markup.button.url('–õ—å–≤—ñ–≤', 'https://poweroff.loe.lviv.ua/'),
            ]),
        );
    }
});

bot.action('show-ip', async (context) => {
    const userId = User.getId(context);
    const user = User.get(userId);

    if (user) {
        await context.reply(`–¢–≤–æ—è IP –∞–¥—Ä–µ—Å–∞: ${user.ip}`);
    }
});

bot.command('stop', async (context) => {
    await context.reply(
        'üõë–ê—Ö—Ä–∞–Ω–∞, –∞—Ç–º—î–Ω–∞. –¢–∏ –∑—É–ø–∏–Ω–∏–≤ –±–æ—Ça. –°—Ö–æ–∂–µ, –≤—ñ–Ω –≤—Å—Ä–∞—Ç–æ –ø—Ä–∞—Ü—é—î. –ù—É —Å–æ—Ä—ñ, –±—É–≤–∞—î',
    );
});

bot.launch()
    .then(() => {
        FS.createFile<User[]>(pathTo.logsJSON, []);
        FS.createFile<UserId[]>(pathTo.activationsJSON, []);
    })
    .then(() => {
        const users = User.getAll();

        users.forEach(({ userId }) => startSchedule(userId));
    })
    .finally(() => console.log('Bot has been started'));
