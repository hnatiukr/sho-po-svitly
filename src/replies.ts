import { Context, Markup, Telegraf } from 'telegraf';

import * as db from './db.js';
import { Power, User } from './types.js';
import { toStrong, parseMode, passedTimeFrom } from './helpers.js';

export async function startBot(context: Context, isExistingUser: boolean) {
    await context.reply(
        '–ü—Ä–∏–≤—ñ—Ç. –Ø –≤–º—ñ—é —ñ–Ω—Ñ–æ—Ä–º–≤–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó, –ø—ñ–Ω–≥—É—é—á–∏ —Ä–æ—É—Ç–µ—Ä',
    );

    if (isExistingUser) {
        await context.reply(
            '–¢–≤–æ—è IP –∞–¥—Ä–µ—Å–∞ –≤–∂–µ —î –≤ –±–∞–∑—ñ. –Ø –ø—Ä–æ–¥–æ–≤–∂—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —ñ –æ–¥—Ä–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª—é, —è–∫—â–æ –∑ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º —â–æ—Å—å —Ç—Ä–∞–ø–∏—Ç—å—Å—è.',
        );
    } else {
        await context.reply(
            '–¢–≤–æ—î—ó IP –∞–¥—Ä–µ—Å–∏ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ —ó—ó –º–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:',
        );
    }
}

export async function stopBot(context: Context): Promise<void> {
    await context.reply(
        'üõë –ê—Ö—Ä–∞–Ω–∞, –∞—Ç–º—î–Ω–∞. –¢–∏ –∑—É–ø–∏–Ω–∏–≤ –±–æ—Ça. –°—Ö–æ–∂–µ, –≤—ñ–Ω –≤—Å—Ä–∞—Ç–æ –ø—Ä–∞—Ü—é—î. –ù—É —Å–æ—Ä—ñ, –±—É–≤–∞—î',
    );
}

export async function commandsNotAvailable(context: Context): Promise<void> {
    await context.reply(
        '–ß—É—î—à –ø–µ—Å, —Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–æ—Ç–∞, –∞ –ø–æ—Ç—ñ–º –ª—ñ–∑—å –∫—É–¥–∏ —Ö–æ—á–µ—Ç—å—Å—è',
    );

    await context.reply(
        '–¢–≤–æ—î—ó IP –∞–¥—Ä–µ—Å–∏ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ —ó—ó –º–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:',
    );
}

export async function ifUserInputNotCommand(context: Context): Promise<void> {
    await context.reply(
        '–®–æ? –Ø –∑–≤–∏—á–∞–π–Ω–∏–π —Ç—É–ø–∏–π –±–æ—Ç. –Ø –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—é, –∫—Ä—ñ–º –∑–∞–¥–∞–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥. –ù–µ –∑–º—É—à—É–π –º–µ–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ —è–∫—É—Å—å —Ö—É–π–Ω—é –≤ —á–∞—Ç üò°',
    );

    await context.reply(
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –º–µ–Ω—é, –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è',
    );

    await context.reply(toStrong('–û—Å—å —Ç—É—Ç ‚ÜôÔ∏è'), parseMode);
}

export async function scheduleCommand(context: Context): Promise<void> {
    const buttons = [
        Markup.button.url('–ö–∏—ó–≤', 'https://kyiv.yasno.com.ua/schedule-turn-off-electricity'),
        Markup.button.url('–õ—å–≤—ñ–≤', 'https://poweroff.loe.lviv.ua/'),
    ];
    const inlineKeyboard = Markup.inlineKeyboard(buttons);

    await context.reply(
        '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Ç–∏ –º–æ–∂–µ—à –Ω–∏–∂—á–µ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏. –ê–ª–µ –∂ —Ç–∏ –∑–Ω–∞—î—à, —â–æ –≤–æ–Ω–∏ –Ω—ñ—Ö—É—è –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å, –±–æ –π–æ–±–∞–Ω—ñ —Ä–æ—Å—ñ—è–Ω–∏ - –Ω—ñ–∫—á–µ–º–∏, –≥–Ω—ñ–π —ñ –ø—ñ–¥–∞—Ä–∞—Å–∏!',
        inlineKeyboard,
    );
}

export async function settingsCommand(context: Context, ip: User['ip']): Promise<void> {
    const buttons = [Markup.button.callback('‚úèÔ∏è –∑–º—ñ–Ω–∏—Ç–∏ IP –∞–¥—Ä–µ—Å—É', 'change-ip')];
    const inlineKeyboard = Markup.inlineKeyboard(buttons);

    await context.reply('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n');
    await context.reply(`–¢–≤–æ—è IP –∞–¥—Ä–µ—Å–∞: ${toStrong(ip)}\n`, { ...parseMode, ...inlineKeyboard });
}

export async function statCommand(context: Context): Promise<void> {
    await context.reply('üöß –¶—è —Ñ—ñ—á–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
}

export const pingCommand = {
    [`${true}-${Power.On}`]: async (context: Context, updatedAt: User['updatedAt']) => {
        const message = `üí°–í–µ—á—ñ—Ä –≤ —Ö–∞—Ç—É! –ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è —â–æ–π–Ω–æ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏. –í–æ–Ω–æ –±—É–ª–æ –≤—ñ–¥—Å—É—Ç–Ω—î ${passedTimeFrom(
            updatedAt,
        )}`;

        await context.reply(toStrong(message), parseMode);
    },

    [`${true}-${Power.Off}`]: async (context: Context, updatedAt: User['updatedAt']) => {
        const message = `‚õî–°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –£ —Ç–µ–±–µ –Ω–∞ –≤—Å—å–æ-–ø—Ä–æ–≤—Å—å–æ –±—É–ª–æ ${passedTimeFrom(
            updatedAt,
        )}`;

        await context.reply(toStrong(message), parseMode);
    },

    [`${false}-${Power.On}`]: async (context: Context, updatedAt: User['updatedAt']) => {
        await context.reply(`‚ö°Ô∏è–ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤ —Ö–∞—Ç—ñ —î –≤–∂–µ ${passedTimeFrom(updatedAt)}`);
    },

    [`${false}-${Power.Off}`]: async (context: Context, updatedAt: User['updatedAt']) => {
        await context.reply(`üîå–ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î –≤–∂–µ ${passedTimeFrom(updatedAt)}`);
    },
};

export const validationIp = {
    intro: async (context: Context) => {
        await context.reply('–û, –∫—Ä–∞—Å–∞–≤–∞! –¢–µ–ø–µ—Ä, –¥–∞–≤–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —à–æ —Ç–∞–º—É —Ç–µ–±–µ –ø–æ —Å–≤—ñ—Ç–ª—É –∑–∞—Ä–∞–∑');

        await context.reply('–•–≤–∏–ª–∏–Ω–æ—á–∫—É... üê¢');
    },

    powerOn: async (context: Context) => {
        const message = 'üí° –°—Ö–æ–∂–µ, –∑–∞—Ä–∞–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ —î. –Ü —Ü–µ –∑–∞—î–±—ñ—Å—å';

        await context.reply(toStrong(message), parseMode);
    },

    powerOff: async (context: Context) => {
        const message = '‚õîÔ∏è –°—Ö–æ–∂–µ, c–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –ó–∞—Ä–∞–∑ –µ–ª–µ–∫—Ä–∏–∫–∏ –Ω–µ–º–∞—î';

        await context.reply(toStrong(message), parseMode);
    },

    outro: async (context: Context) => {
        await context.reply(
            '–Ø –ø—Ä–æ–¥–æ–≤–∂—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —ñ –ø–æ–≤—ñ–¥–æ–º–ª—é, —è–∫ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –∑–º—ñ–Ω–∏—Ç—å—Å—è',
        );
    },

    invalidIp: async (context: Context) => {
        await context.reply('–•—É–π–Ω—è —è–∫–∞—Å—å üí© –¢–∏ —à–æ –Ω–µ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É IP –∞–¥—Ä–µ—Å—É?');
    },
};

export async function changeIpAction(context: Context): Promise<void> {
    await context.reply('–í–≤–µ–¥—É –Ω–æ–≤—É IP –∞–¥—Ä–µ—Å—É –Ω–∏–∂—á–µ, –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:');
}

export async function schedulerChangedPower(
    bot: Telegraf<Context>,
    userId: User['userId'],
    power: User['power'],
    updatedAt: User['updatedAt'],
) {
    const message = power
        ? `üí° –ê–ª–ª—ñ–ª—É—è! –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –ê–ª–µ –Ω–µ –∑–ª–æ–≤–∂–∏–≤–∞–π —ó–º, –±–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ –∂–æ–ø—ñ –Ω–∞–¥–∞—î. –°–≤—ñ—Ç–ª–∞ –Ω–µ –±—É–ª–æ ${passedTimeFrom(
              updatedAt,
          )}`
        : `‚õîÔ∏è –°–≤—ñ—Ç–ª—É - –ø–∏–∑–¥–∞. –°—Ö–æ–∂–µ, –µ–ª–µ–∫—Ç—Ä–∏–∫—É –≤–∏—Ä—É–±–∏–ª–∏ –Ω–∞—Ö—É–π. –£ —Ç–µ–±–µ –Ω–∞ –≤—Å—å–æ –ø—Ä–æ–≤—Å—å–æ –±—É–ª–æ ${passedTimeFrom(
              updatedAt,
          )}`;

    try {
        await bot.telegram.sendMessage(userId, toStrong(message), parseMode);
    } catch (error) {
        console.log(error);

        await db.deactivateUser(userId);
    }
}
